labs(title = 'Brand Code Distribution', x = 'Brand Code', y = 'Frequency') +
theme_minimal()
train_numeric_df <- train_df %>%
dplyr::select(where(is.numeric)) %>%
na.omit()
# Calculate correlation matrix
train_numeric_cor <- cor(train_numeric_df)
# Generate the correlation plot
corrplot(train_numeric_cor,
method = "color",
tl.col = "black",
col = brewer.pal(n = 10,
name = "RdYlBu"),
type = "lower",
order = "hclust",
addCoef.col = "black",
number.cex = 0.8,
tl.cex = 0.8,
cl.cex = 0.8,
addCoefasPercent = TRUE,
number.digits = 1)
train_numeric_df %>%
dplyr::select(-PH) %>%  # Exclude 'PH' from predictors if needed
cor(train_numeric_df$PH) %>%  # Calculate correlations with 'PH'
as.data.frame() %>%
rownames_to_column(var = "Predictor") %>%
filter(Predictor != "PH") %>%  # Ensure 'PH' is not included as its own predictor
mutate(Predictor = fct_reorder(factor(Predictor), V1)) %>%  # Reorder factors by correlation for plotting
ggplot(aes(x = Predictor, y = V1, label = round(V1, 2))) +
geom_col(fill = "lightgreen") +
geom_text(color = "black", size = 3, vjust = -0.3) +
coord_flip() +
labs(title = "Correlations: pH", x = "Predictors", y = "Correlation Coefficient") +
theme_minimal()
train_df<- train_df %>%
dplyr::mutate(`Brand Code` = factor(`Brand Code`,
levels = c('A','B','C','D'),
ordered = FALSE))
nzv_df <- nearZeroVar(train_df, saveMetrics= TRUE)
nzv_df <- as.data.frame(nzv_df) %>%
rownames_to_column(var = "Predictor")
nzv_filtered_df <- nzv_df %>%
filter(nzv == TRUE)
ggplot(nzv_filtered_df, aes(x = Predictor, y = percentUnique, fill = freqRatio > 0.95)) +
geom_col(position = "dodge") +
coord_flip() +
labs(title = "Near-Zero Variance Predictors",
x = "Predictors",
y = "Percentage of Unique Values") +
theme_minimal()
print(nzv_filtered_df)
set.seed(1234)
train_df<- as.data.frame(train_df)
#remove pH from the train data set in order to only transform the predictors
train_features <- train_df %>%
dplyr::select(-c(PH))
preProc <- preProcess(train_features, method = c("knnImpute", "nzv", "corr", "center", "scale", "BoxCox"))
preProc_train <- predict(preProc, train_features)
preProc_train$PH <- train_df$PH
preProc_train%>%
dplyr::filter(PH=="")
set.seed(1234)
train_df<- as.data.frame(train_df)
#remove pH from the train data set in order to only transform the predictors
train_features <- train_df %>%
dplyr::select(-c(PH))
preProc <- preProcess(train_features, method = c("knnImpute", "nzv", "corr", "center", "scale", "BoxCox"))
preProc_train <- predict(preProc, train_features)
preProc_train$PH <- train_df$PH
preProc_train%>%
dplyr::filter(is.na(PH))
View(preProc_train)
train_df <- readxl::read_xlsx('Data/StudentData.xlsx')
test_df <- readxl::read_xlsx('Data/StudentEvaluation.xlsx')
train_df%>%
dplyr::filter(PH=="")
train_df <- readxl::read_xlsx('Data/StudentData.xlsx')
test_df <- readxl::read_xlsx('Data/StudentEvaluation.xlsx')
preProc_train%>%
dplyr::filter(is.na(PH))
train_df <- readxl::read_xlsx('Data/StudentData.xlsx')
test_df <- readxl::read_xlsx('Data/StudentEvaluation.xlsx')
train_df%>%
dplyr::filter(is.na(PH))
library(Amelia)
library(car)
library(caret)
library(corrplot)
library(Cubist)
library(DataExplorer)
library(dplyr)
library(e1071)
library(earth)
library(forcats)
library(forecast)
library(fpp3)
library(gbm)
library(ggplot2)
library(kableExtra)
library(MASS)
library(mice)
library(mlbench)
library(party)
library(randomForest)
library(RANN)
library(RColorBrewer)
library(readxl)
library(rpart)
library(rpart.plot)
library(summarytools)
library(tidyr)
library(VIM)
train_df <- readxl::read_xlsx('Data/StudentData.xlsx')
test_df <- readxl::read_xlsx('Data/StudentEvaluation.xlsx')
glimpse(train_df)
str(train_df)
summary(train_df)
glimpse(test_df)
str(test_df)
summary(test_df)
missing_train_df <- train_df %>%
summarise(across(everything(), ~mean(is.na(.)))) %>%
pivot_longer(cols = everything(), names_to = "variable", values_to = "na_proportion")
# Create a bar plot using ggplot2
ggplot(missing_train_df, aes(x = variable, y = na_proportion)) +
geom_bar(stat = "identity", fill = "skyblue", color = "lightblue") +
theme_minimal() +
labs(y = "NA Proportion", x = "Variables") +
coord_flip()
VIM::aggr(train_df, numbers=T, sortVars=T, bars = FALSE,
cex.axis = .6)
DataExplorer::plot_histogram(train_df, nrow = 3L, ncol = 4L)
unique(train_df$`Brand Code`)
train_df %>%
mutate(`Brand Code` = factor(`Brand Code`, levels = names(sort(table(`Brand Code`), decreasing = TRUE)))) %>%
ggplot(aes(x = `Brand Code`, fill = `Brand Code`)) +
geom_bar(stat = "count") +
geom_text(stat = 'count', aes(label = ..count..), vjust = -0.5, color = "black") +
labs(title = 'Brand Code Distribution', x = 'Brand Code', y = 'Frequency') +
theme_minimal()
train_df<-train_df%>%
dplyr::filter(!is.na(PH))
library(Amelia)
library(car)
library(caret)
library(corrplot)
library(Cubist)
library(DataExplorer)
library(dplyr)
library(e1071)
library(earth)
library(forcats)
library(forecast)
library(fpp3)
library(gbm)
library(ggplot2)
library(kableExtra)
library(MASS)
library(mice)
library(mlbench)
library(party)
library(randomForest)
library(RANN)
library(RColorBrewer)
library(readxl)
library(rpart)
library(rpart.plot)
library(summarytools)
library(tidyr)
library(VIM)
train_df <- readxl::read_xlsx('Data/StudentData.xlsx')
test_df <- readxl::read_xlsx('Data/StudentEvaluation.xlsx')
glimpse(train_df)
str(train_df)
summary(train_df)
glimpse(test_df)
str(test_df)
summary(test_df)
missing_train_df <- train_df %>%
summarise(across(everything(), ~mean(is.na(.)))) %>%
pivot_longer(cols = everything(), names_to = "variable", values_to = "na_proportion")
# Create a bar plot using ggplot2
ggplot(missing_train_df, aes(x = variable, y = na_proportion)) +
geom_bar(stat = "identity", fill = "skyblue", color = "lightblue") +
theme_minimal() +
labs(y = "NA Proportion", x = "Variables") +
coord_flip()
VIM::aggr(train_df, numbers=T, sortVars=T, bars = FALSE,
cex.axis = .6)
DataExplorer::plot_histogram(train_df, nrow = 3L, ncol = 4L)
unique(train_df$`Brand Code`)
train_df %>%
mutate(`Brand Code` = factor(`Brand Code`, levels = names(sort(table(`Brand Code`), decreasing = TRUE)))) %>%
ggplot(aes(x = `Brand Code`, fill = `Brand Code`)) +
geom_bar(stat = "count") +
geom_text(stat = 'count', aes(label = ..count..), vjust = -0.5, color = "black") +
labs(title = 'Brand Code Distribution', x = 'Brand Code', y = 'Frequency') +
theme_minimal()
train_numeric_df <- train_df %>%
dplyr::select(where(is.numeric)) %>%
na.omit()
# Calculate correlation matrix
train_numeric_cor <- cor(train_numeric_df)
# Generate the correlation plot
corrplot(train_numeric_cor,
method = "color",
tl.col = "black",
col = brewer.pal(n = 10,
name = "RdYlBu"),
type = "lower",
order = "hclust",
addCoef.col = "black",
number.cex = 0.8,
tl.cex = 0.8,
cl.cex = 0.8,
addCoefasPercent = TRUE,
number.digits = 1)
train_numeric_df %>%
dplyr::select(-PH) %>%  # Exclude 'PH' from predictors if needed
cor(train_numeric_df$PH) %>%  # Calculate correlations with 'PH'
as.data.frame() %>%
rownames_to_column(var = "Predictor") %>%
filter(Predictor != "PH") %>%  # Ensure 'PH' is not included as its own predictor
mutate(Predictor = fct_reorder(factor(Predictor), V1)) %>%  # Reorder factors by correlation for plotting
ggplot(aes(x = Predictor, y = V1, label = round(V1, 2))) +
geom_col(fill = "lightgreen") +
geom_text(color = "black", size = 3, vjust = -0.3) +
coord_flip() +
labs(title = "Correlations: pH", x = "Predictors", y = "Correlation Coefficient") +
theme_minimal()
train_df%>%
dplyr::filter(!is.na(PH))
train_df<-train_df%>%
dplyr::filter(!is.na(PH))
train_df<- train_df %>%
dplyr::mutate(`Brand Code` = factor(`Brand Code`,
levels = c('A','B','C','D','not known'),
ordered = FALSE))
nzv_df <- nearZeroVar(train_df, saveMetrics= TRUE)
nzv_df <- as.data.frame(nzv_df) %>%
rownames_to_column(var = "Predictor")
nzv_filtered_df <- nzv_df %>%
filter(nzv == TRUE)
ggplot(nzv_filtered_df, aes(x = Predictor, y = percentUnique, fill = freqRatio > 0.95)) +
geom_col(position = "dodge") +
coord_flip() +
labs(title = "Near-Zero Variance Predictors",
x = "Predictors",
y = "Percentage of Unique Values") +
theme_minimal()
print(nzv_filtered_df)
set.seed(1234)
train_df<- as.data.frame(train_df)
#remove pH from the train data set in order to only transform the predictors
train_features <- train_df %>%
dplyr::select(-c(PH))
preProc <- preProcess(train_features, method = c("knnImpute", "nzv", "corr", "center", "scale", "BoxCox"))
preProc_train <- predict(preProc, train_features)
preProc_train$PH <- train_df$PH
preProc_train%>%
dplyr::filter(is.na(PH))
library(Amelia)
library(car)
library(caret)
library(corrplot)
library(Cubist)
library(DataExplorer)
library(dplyr)
library(e1071)
library(earth)
library(forcats)
library(forecast)
library(fpp3)
library(gbm)
library(ggplot2)
library(kableExtra)
library(MASS)
library(mice)
library(mlbench)
library(party)
library(randomForest)
library(RANN)
library(RColorBrewer)
library(readxl)
library(rpart)
library(rpart.plot)
library(summarytools)
library(tidyr)
library(VIM)
train_df <- readxl::read_xlsx('Data/StudentData.xlsx')
test_df <- readxl::read_xlsx('Data/StudentEvaluation.xlsx')
glimpse(train_df)
str(train_df)
summary(train_df)
glimpse(test_df)
str(test_df)
summary(test_df)
missing_train_df <- train_df %>%
summarise(across(everything(), ~mean(is.na(.)))) %>%
pivot_longer(cols = everything(), names_to = "variable", values_to = "na_proportion")
# Create a bar plot using ggplot2
ggplot(missing_train_df, aes(x = variable, y = na_proportion)) +
geom_bar(stat = "identity", fill = "skyblue", color = "lightblue") +
theme_minimal() +
labs(y = "NA Proportion", x = "Variables") +
coord_flip()
VIM::aggr(train_df, numbers=T, sortVars=T, bars = FALSE,
cex.axis = .6)
DataExplorer::plot_histogram(train_df, nrow = 3L, ncol = 4L)
unique(train_df$`Brand Code`)
train_df %>%
mutate(`Brand Code` = factor(`Brand Code`, levels = names(sort(table(`Brand Code`), decreasing = TRUE)))) %>%
ggplot(aes(x = `Brand Code`, fill = `Brand Code`)) +
geom_bar(stat = "count") +
geom_text(stat = 'count', aes(label = ..count..), vjust = -0.5, color = "black") +
labs(title = 'Brand Code Distribution', x = 'Brand Code', y = 'Frequency') +
theme_minimal()
train_numeric_df <- train_df %>%
dplyr::select(where(is.numeric)) %>%
na.omit()
# Calculate correlation matrix
train_numeric_cor <- cor(train_numeric_df)
# Generate the correlation plot
corrplot(train_numeric_cor,
method = "color",
tl.col = "black",
col = brewer.pal(n = 10,
name = "RdYlBu"),
type = "lower",
order = "hclust",
addCoef.col = "black",
number.cex = 0.8,
tl.cex = 0.8,
cl.cex = 0.8,
addCoefasPercent = TRUE,
number.digits = 1)
train_numeric_df %>%
dplyr::select(-PH) %>%  # Exclude 'PH' from predictors if needed
cor(train_numeric_df$PH) %>%  # Calculate correlations with 'PH'
as.data.frame() %>%
rownames_to_column(var = "Predictor") %>%
filter(Predictor != "PH") %>%  # Ensure 'PH' is not included as its own predictor
mutate(Predictor = fct_reorder(factor(Predictor), V1)) %>%  # Reorder factors by correlation for plotting
ggplot(aes(x = Predictor, y = V1, label = round(V1, 2))) +
geom_col(fill = "lightgreen") +
geom_text(color = "black", size = 3, vjust = -0.3) +
coord_flip() +
labs(title = "Correlations: pH", x = "Predictors", y = "Correlation Coefficient") +
theme_minimal()
train_df%>%
dplyr::filter(!is.na(PH))
train_df<-train_df%>%
dplyr::filter(!is.na(PH))
train_df<- train_df %>%
dplyr::mutate(`Brand Code` = factor(`Brand Code`,
levels = c('A','B','C','D','not known'),
ordered = FALSE))
nzv_df <- nearZeroVar(train_df, saveMetrics= TRUE)
nzv_df <- as.data.frame(nzv_df) %>%
rownames_to_column(var = "Predictor")
nzv_filtered_df <- nzv_df %>%
filter(nzv == TRUE)
ggplot(nzv_filtered_df, aes(x = Predictor, y = percentUnique, fill = freqRatio > 0.95)) +
geom_col(position = "dodge") +
coord_flip() +
labs(title = "Near-Zero Variance Predictors",
x = "Predictors",
y = "Percentage of Unique Values") +
theme_minimal()
print(nzv_filtered_df)
set.seed(1234)
train_df<- as.data.frame(train_df)
#remove pH from the train data set in order to only transform the predictors
train_preprocess_df <- train_df %>%
dplyr::select(-c(PH))
preProc_ls <- preProcess(train_preprocess_df, method = c("knnImpute", "nzv", "corr", "center", "scale", "BoxCox"))
train_preProc_df <- predict(preProc_ls, train_preprocess_df)
train_preProc_df$PH <- train_df$PH
# To verify no NAs produced when recombining
train_preProc_df%>%
dplyr::filter(is.na(PH))
training_set_df <- createDataPartition(train_preProc_df$PH, p=0.8, list=FALSE)
train_model_df <- train_preProc_df[training_set,]
training_set_df <- createDataPartition(train_preProc_df$PH, p=0.8, list=FALSE)
train_model_df <- train_preProc_df[training_set_df,]
eval_model_df <- train_preProc_df[-training_set_df,]
View(training_set_df)
View(train_model_df)
training_set_df <- createDataPartition(train_preProc_df$PH, p=0.8, list=FALSE)
library(Amelia)
library(car)
library(caret)
library(corrplot)
library(Cubist)
library(DataExplorer)
library(dplyr)
library(e1071)
library(earth)
library(forcats)
library(forecast)
library(fpp3)
library(gbm)
library(ggplot2)
library(kableExtra)
library(MASS)
library(mice)
library(mlbench)
library(party)
library(randomForest)
library(RANN)
library(RColorBrewer)
library(readxl)
library(rpart)
library(rpart.plot)
library(summarytools)
library(tidyr)
library(VIM)
train_df <- readxl::read_xlsx('Data/StudentData.xlsx')
test_df <- readxl::read_xlsx('Data/StudentEvaluation.xlsx')
glimpse(train_df)
str(train_df)
summary(train_df)
glimpse(test_df)
str(test_df)
summary(test_df)
missing_train_df <- train_df %>%
summarise(across(everything(), ~mean(is.na(.)))) %>%
pivot_longer(cols = everything(), names_to = "variable", values_to = "na_proportion")
# Create a bar plot using ggplot2
ggplot(missing_train_df, aes(x = variable, y = na_proportion)) +
geom_bar(stat = "identity", fill = "skyblue", color = "lightblue") +
theme_minimal() +
labs(y = "NA Proportion", x = "Variables") +
coord_flip()
VIM::aggr(train_df, numbers=T, sortVars=T, bars = FALSE,
cex.axis = .6)
DataExplorer::plot_histogram(train_df, nrow = 3L, ncol = 4L)
unique(train_df$`Brand Code`)
train_df %>%
mutate(`Brand Code` = factor(`Brand Code`, levels = names(sort(table(`Brand Code`), decreasing = TRUE)))) %>%
ggplot(aes(x = `Brand Code`, fill = `Brand Code`)) +
geom_bar(stat = "count") +
geom_text(stat = 'count', aes(label = ..count..), vjust = -0.5, color = "black") +
labs(title = 'Brand Code Distribution', x = 'Brand Code', y = 'Frequency') +
theme_minimal()
train_numeric_df <- train_df %>%
dplyr::select(where(is.numeric)) %>%
na.omit()
# Calculate correlation matrix
train_numeric_cor <- cor(train_numeric_df)
# Generate the correlation plot
corrplot(train_numeric_cor,
method = "color",
tl.col = "black",
col = brewer.pal(n = 10,
name = "RdYlBu"),
type = "lower",
order = "hclust",
addCoef.col = "black",
number.cex = 0.8,
tl.cex = 0.8,
cl.cex = 0.8,
addCoefasPercent = TRUE,
number.digits = 1)
train_numeric_df %>%
dplyr::select(-PH) %>%  # Exclude 'PH' from predictors if needed
cor(train_numeric_df$PH) %>%  # Calculate correlations with 'PH'
as.data.frame() %>%
rownames_to_column(var = "Predictor") %>%
filter(Predictor != "PH") %>%  # Ensure 'PH' is not included as its own predictor
mutate(Predictor = fct_reorder(factor(Predictor), V1)) %>%  # Reorder factors by correlation for plotting
ggplot(aes(x = Predictor, y = V1, label = round(V1, 2))) +
geom_col(fill = "lightgreen") +
geom_text(color = "black", size = 3, vjust = -0.3) +
coord_flip() +
labs(title = "Correlations: pH", x = "Predictors", y = "Correlation Coefficient") +
theme_minimal()
train_df%>%
dplyr::filter(!is.na(PH))
train_df<-train_df%>%
dplyr::filter(!is.na(PH))
train_df<- train_df %>%
dplyr::mutate(`Brand Code` = factor(`Brand Code`,
levels = c('A','B','C','D','not known'),
ordered = FALSE))
nzv_df <- nearZeroVar(train_df, saveMetrics= TRUE)
nzv_df <- as.data.frame(nzv_df) %>%
rownames_to_column(var = "Predictor")
nzv_filtered_df <- nzv_df %>%
filter(nzv == TRUE)
ggplot(nzv_filtered_df, aes(x = Predictor, y = percentUnique, fill = freqRatio > 0.95)) +
geom_col(position = "dodge") +
coord_flip() +
labs(title = "Near-Zero Variance Predictors",
x = "Predictors",
y = "Percentage of Unique Values") +
theme_minimal()
print(nzv_filtered_df)
set.seed(1234)
train_df<- as.data.frame(train_df)
#remove pH from the train data set in order to only transform the predictors
train_preprocess_df <- train_df %>%
dplyr::select(-c(PH))
preProc_ls <- preProcess(train_preprocess_df, method = c("knnImpute", "nzv", "corr", "center", "scale", "BoxCox"))
train_preProc_df <- predict(preProc_ls, train_preprocess_df)
train_preProc_df$PH <- train_df$PH
# To verify no NAs produced when recombining
train_preProc_df%>%
dplyr::filter(is.na(PH))
training_set_df <- createDataPartition(train_preProc_df$PH, p=0.8, list=FALSE)
train_proc_df <- train_preProc_df[training_set_df,]
eval_proc_df <- train_preProc_df[-training_set_df,]
